unit TestSvThreading;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, SysUtils, SvThreading, Diagnostics;

type
  TestTSvFuture = class(TTestCase)
  private
    FSvFuture: TSvFuture<Integer>;
    sw: TStopwatch;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecute;
  end;

implementation

{ TestTSvFuture }

procedure TestTSvFuture.SetUp;
begin
  inherited;

end;

procedure TestTSvFuture.TearDown;
begin
  inherited;

end;

const
  INTVAL = 100;
  INTVAL2 = 111111;

procedure TestTSvFuture.TestExecute;
var
  func1, func2: TFunc<Integer>;
begin
  sw := TStopwatch.StartNew;
  func1 := function: Integer
    begin
      Sleep(1100);
      Result := INTVAL;
    end;

  func2 := function: Integer
    begin
      Sleep(600);
      Result := INTVAL2;
    end;

  FSvFuture.Assign(func1);
  Check(sw.ElapsedMilliseconds < 500, '1');
  CheckEquals(INTVAL, FSvFuture, '2');
  sw.Stop;
  Check(sw.ElapsedMilliseconds >= 1000, '3');

  sw := TStopwatch.StartNew;

  FSvFuture.Assign(func2);

  CheckEquals(INTVAL2, FSvFuture, '4');
  sw.Stop;
  Check(sw.ElapsedMilliseconds >= 500, '5');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSvFuture.Suite);
end.

