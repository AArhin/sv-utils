unit TestSvDesignPatterns;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Generics.Collections, SysUtils, SvDesignPatterns, Rtti, Classes;

type
  // Test methods for class TFactory
  {$HINTS OFF}
  //we dont need hints in our tests
  TestTFactory = class(TTestCase)
  private
    FFunc: TFactoryMethod<TStringList>;
    FFactory: TFactory<string, TStringList>;
    slList: TStringList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetInstance;
    procedure TestRegisterFactoryMethod;
    procedure TestUnregisterFactoryMethod;
    procedure TestUnregisterAll;
    procedure TestIsRegistered;
    procedure TestCreateElement;
    procedure TestGetEnumerator;
  end;
  // Test methods for class TMultiton

  TestTMultiton = class(TTestCase)
  private
    FMultiton: TMultiton<string, TStringList>;
    FFunc: TFactoryMethod<TStringList>;
    slList: TStringList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsRegistered;
    procedure TestRegisterFactoryMethod;
    procedure TestUnregisterFactoryMethod;
    procedure TestUnregisterAll;
    procedure TestGetEnumerator;
    procedure TestGetInstance;
    procedure TestGetDefaultInstance;
  end;

  TestTSingleton = class(TTestCase)
  private
    FSingleton: TSingleton<TStringList>;
    FIntfSingleton: ISingleton<TStringList>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetInstance;
  end;

implementation

procedure TestTFactory.SetUp;
var
  i: Integer;
begin
  FFactory := TFactory<string, TStringList>.Create;
  FFunc := function: TStringList begin Result := TStringList.Create end;
  slList := TStringList.Create;

  for i := 1 to 10 do
  begin
    slList.Add(IntToStr(i));
    FFactory.RegisterFactoryMethod(IntToStr(i),
      function: TStringList
      begin
        Result := TStringList.Create;
        Result.Add('5');
      end);
  end;

  slList.Sorted := True;
end;

procedure TestTFactory.TearDown;
var
  pair: TPair<string,TStringList>;
begin
  for pair in FFactory do
  begin
    pair.Value.Free;
  end;
  FFactory.Free;
  FFactory := nil;
  slList.Free;
end;

procedure TestTFactory.TestCreateElement;
var
  sl: TStringList;
begin
  sl := nil;
  sl := FFactory.CreateElement;
  Check(Assigned(sl));
  CheckEquals(0, sl.Count);
  sl.Add('Temp');
  CheckEquals(1, sl.Count);
  sl.Free;
end;

procedure TestTFactory.TestGetEnumerator;
var
  pair: TPair<string,TStringList>;
begin
  for pair in FFactory do
  begin
    Check( slList.IndexOf(pair.Key) <> -1);
    Check(Assigned(pair.Value));
    CheckEquals(1, pair.Value.Count);
    pair.Value.Add('temp');
    CheckEquals(2, pair.Value.Count);
    pair.Value.Free;
  end;
end;

procedure TestTFactory.TestGetInstance;
var
  ReturnValue: TStringList;
  AKey: string;
begin
  ReturnValue := nil;
  AKey := '5';
  ReturnValue := FFactory.GetInstance(AKey);
  Check(Assigned(ReturnValue));
  CheckEquals(AKey ,ReturnValue[0]);
  ReturnValue.Free;
end;

procedure TestTFactory.TestIsRegistered;
var
  AKey: string;
begin
  AKey := '4';
  CheckTrue(FFactory.IsRegistered(AKey));
  AKey := '15';
  CheckFalse(FFactory.IsRegistered(AKey));
end;

procedure TestTFactory.TestRegisterFactoryMethod;
begin
  CheckEquals(10, FFactory.Count);
  FFactory.RegisterFactoryMethod('test', FFunc);
  CheckEquals(11, FFactory.Count);
end;

procedure TestTFactory.TestUnregisterAll;
var
  pair: TPair<string,TStringList>;
begin
  CheckEquals(10, FFactory.Count);
  //free object to avoid memory leaks
  for pair in FFactory do
  begin
    pair.Value.Free;
  end;
  FFactory.UnregisterAll;
  CheckEquals(0, FFactory.Count);
end;

procedure TestTFactory.TestUnregisterFactoryMethod;
var
  AKey: string;
begin
  CheckEquals(10, FFactory.Count);
  AKey := '5';
  FFactory.GetInstance(AKey).Free;
  FFactory.UnregisterFactoryMethod(AKey);
  CheckEquals(9, FFactory.Count);
end;

procedure TestTMultiton.SetUp;
var
  i: Integer;
begin
  FMultiton := TMultiton<string, TStringList>.Create(True);
  FFunc := function: TStringList begin Result := TStringList.Create end;
  slList := TStringList.Create;

  for i := 1 to 10 do
  begin
    slList.Add(IntToStr(i));
    FMultiton.RegisterFactoryMethod(IntToStr(i),
      function: TStringList
      begin
        Result := TStringList.Create;
        Result.Add('5');
      end);
  end;

  slList.Sorted := True;
end;

procedure TestTMultiton.TearDown;
begin
  FMultiton.Free;
  FMultiton := nil;
  slList.Free;
end;

procedure TestTMultiton.TestRegisterFactoryMethod;
var
  AKey: string;
begin
  CheckEquals(10, FMultiton.Count);
  AKey := '11';
  FMultiton.RegisterFactoryMethod(AKey, FFunc);
  CheckEquals(11, FMultiton.Count);
end;

procedure TestTMultiton.TestUnregisterFactoryMethod;
var
  AKey: string;
begin
  AKey := '5';
  CheckEquals(10, FMultiton.Count);
  FMultiton.UnregisterFactoryMethod(AKey);
  CheckEquals(9, FMultiton.Count);
end;

procedure TestTMultiton.TestUnregisterAll;
begin
  CheckEquals(10, FMultiton.Count);
  FMultiton.UnregisterAll;
  CheckEquals(0, FMultiton.Count);
end;

procedure TestTMultiton.TestGetDefaultInstance;
var
  AKey: string;
begin
  CheckEquals(10, FMultiton.Count);
  AKey := '11';
  FMultiton.RegisterFactoryMethod(AKey,
    function: TStringList
    begin
      Result := TStringList.Create;
      Result.Add('111');
    end);
  CheckEquals(11, FMultiton.Count);
  FMultiton.RegisterDefaultKey(AKey);
  CheckEqualsString('111', FMultiton.GetDefaultInstance[0]);
end;

procedure TestTMultiton.TestGetEnumerator;
var
  pair: TPair<string,TStringList>;
begin
  for pair in FMultiton do
  begin
    Check( slList.IndexOf(pair.Key) <> -1);
    Check(Assigned(pair.Value));
    CheckEquals(1, pair.Value.Count);
    pair.Value.Add('temp');
    CheckEquals(2, pair.Value.Count);
  end;
end;

procedure TestTMultiton.TestGetInstance;
var
  ReturnValue: TStringList;
  AKey: string;
begin
  AKey := '5';
  ReturnValue := nil;
  ReturnValue := FMultiton.GetInstance(AKey);
  CheckTrue(Assigned(ReturnValue));
  CheckEquals(AKey, ReturnValue[0]);
end;

procedure TestTMultiton.TestIsRegistered;
var
  AKey: string;
begin
  AKey := '4';
  CheckTrue(FMultiton.IsRegistered(AKey));
  AKey := '15';
  CheckFalse(FMultiton.IsRegistered(AKey));
end;

{ TestTSingleton }

procedure TestTSingleton.SetUp;
var
  method: TFactoryMethod<TStringList>;
begin
  inherited;

  method := function: TStringList
    begin
      Result := TStringList.Create;
      Result.AddStrings(TArray<string>.Create('1','2','3'));
    end;

  FSingleton := TSingleton<TStringList>.Create;
  FIntfSingleton := TSingleton<TStringList>.Create(method);

  FSingleton.RegisterConstructor(method);
end;

procedure TestTSingleton.TearDown;
begin
  FSingleton.Free;
  inherited;
end;

procedure TestTSingleton.TestGetInstance;
var
  sl1, sl2: TStringList;
  singleton: ISingleton<TStringList>;
begin
  sl1 := nil;
  sl1 := FSingleton.GetInstance;
  CheckTrue(Assigned(sl1));
  CheckEquals(3, sl1.Count);
  CheckEqualsString('1', sl1[0]);
  CheckEqualsString('2', sl1[1]);
  CheckEqualsString('3', sl1[2]);
  sl2 := nil;
  sl2 := FIntfSingleton.GetInstance;
  CheckTrue(Assigned(sl2));
  CheckEquals(3, sl2.Count);
  CheckEqualsString('1', sl2[0]);
  CheckEqualsString('2', sl2[1]);
  CheckEqualsString('3', sl2[2]);
  //default constructor
  singleton := TSingleTon<TStringList>.Create();
  sl1 := nil;
  sl1 := singleton.GetInstance;
  CheckTrue(Assigned(sl1));
  sl1.AddStrings(TArray<string>.Create('1','2','3'));
  CheckEquals(3, sl1.Count);
  CheckEqualsString('1', sl1[0]);
  CheckEqualsString('2', sl1[1]);
  CheckEqualsString('3', sl1[2]);
end;

{$HINTS ON}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFactory.Suite);
  RegisterTest(TestTMultiton.Suite);
  RegisterTest(TestTSingleton.Suite);
end.

